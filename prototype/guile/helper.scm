(define (filter pred? objects)
  (let loop ((objs objects)
	     (result '()))
    (cond ((null? objs) (reverse! result))
	  ((pred? (car objs)) (loop (cdr objs) (cons (car objs) result)))
	  (else (loop (cdr objs) result)))))

(define (grep rx strings)
  (let ((r (make-regexp rx)))
    (filter (lambda (x) (regexp-exec r x)) strings)))

(define (print . str)
  (for-each (lambda (x) (display x)) str)
  (force-output)
  )

(define (println-sep . str)
  (for-each (lambda (x) 
	      (display "\"")
	      (display x)
	      (display "\"")) str)
  (newline))

(define (println . str)
  (apply print str) (newline))

(define (seq start end)
  (if (<= start end)
      (cons start (seq (1+ start) end))
      '()))

(define (nfor-each func lst)
  (define (nfor-each-helper num func lst)
    (cond ((not (null? lst))
	   (func num (car lst))
	   (nfor-each-helper (1+ num) func (cdr lst)))))
  (nfor-each-helper 1 func lst))